name: Check Harbor Releases

on:
  schedule:
    - cron: "0 * * * *" # 每小时运行一次
  workflow_dispatch: # 手动触发支持

jobs:
  check-harbor-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Check for new Harbor releases
        id: check_release
        run: |
          import requests
          import os

          # 获取最近发布的正式版本
          url = "https://api.github.com/repos/goharbor/harbor/releases"
          response = requests.get(url)
          response.raise_for_status()
          releases = response.json()

          # 读取上次检查的版本 (GitHub Actions 环境变量存储)
          last_checked_version = os.environ.get("LAST_CHECKED_VERSION", "")
          latest_release = next((r for r in releases if not r['prerelease'] and not r['draft']), None)

          if latest_release and latest_release["tag_name"] != last_checked_version:
              print(f"New release found: {latest_release['tag_name']}")
              print(f"::set-output name=new_release::{latest_release['tag_name']}")
              print(f"::set-output name=release_notes::{latest_release['body']}")
          else:
              print("No new release found.")
              print(f"::set-output name=new_release::")
              print(f"::set-output name=release_notes::")

      - name: Send email if new release
        if: steps.check_release.outputs.new_release
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.163.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "New Harbor Release Detected: ${{ steps.check_release.outputs.new_release }}"
          to: llswdhh@163.com
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            A new Harbor release has been detected.

            Tag: ${{ steps.check_release.outputs.new_release }}

            Release Notes:
            ${{ steps.check_release.outputs.release_notes }}

      - name: Save latest checked release
        if: steps.check_release.outputs.new_release
        run: echo "LAST_CHECKED_VERSION=${{ steps.check_release.outputs.new_release }}" >> $GITHUB_ENV