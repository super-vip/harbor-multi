name: Check Harbor Release

on:
  schedule:
    - cron: "0 8 * * *" # ÊØèÂ§© UTC Êó∂Èó¥Êó©‰∏ä 8 ÁÇπËøêË°å
  workflow_dispatch: # ÊâãÂä®Ëß¶Âèë

jobs:
  check-harbor-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests jinja2

      - name: Check for New Harbor Release
        env:
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        run: |
          python <<EOF
          import requests
          import smtplib
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          from jinja2 import Template
          import os
          
          # Ê£ÄÊü•Êñ∞ÁâàÊú¨
          HARBOR_RELEASES_URL = "https://api.github.com/repos/goharbor/harbor/releases"
          RELEASE_TRACK_FILE = ".harbor_latest_release.txt"
          
          response = requests.get(HARBOR_RELEASES_URL)
          releases = response.json()
          
          if not releases or "tag_name" not in releases[0]:
              print("No releases found or API response invalid.")
              exit(1)
          
          new_release = releases[0]
          new_tag = new_release["tag_name"]
          release_notes = new_release.get("body", "No release notes provided.")
          
          # Ê£ÄÊü•ÊòØÂê¶‰∏∫Êñ∞ÁâàÊú¨
          if os.path.exists(RELEASE_TRACK_FILE):
              with open(RELEASE_TRACK_FILE, "r") as f:
                  last_tag = f.read().strip()
          else:
              last_tag = ""
          
          if new_tag == last_tag:
              print(f"No new release detected. Latest release is still {last_tag}.")
              exit(0)
          
          # ‰øùÂ≠òÊúÄÊñ∞ÁâàÊú¨Âè∑
          with open(RELEASE_TRACK_FILE, "w") as f:
              f.write(new_tag)
          
          # ÂèëÈÄÅÈÇÆ‰ª∂
          email_template = """<!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>New Harbor Release</title>
            <style>
              body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 0;
                background-color: #f4f4f4;
                color: #333;
              }
              .container {
                max-width: 600px;
                margin: 20px auto;
                background: #fff;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
              }
              .header {
                text-align: center;
                background-color: #007acc;
                color: #fff;
                padding: 10px 0;
                border-radius: 8px 8px 0 0;
              }
              .header h1 {
                margin: 0;
                font-size: 24px;
              }
              .content {
                padding: 20px;
                line-height: 1.6;
              }
              .content h2 {
                color: #007acc;
              }
              .button {
                display: inline-block;
                padding: 10px 15px;
                margin-top: 20px;
                background-color: #007acc;
                color: white;
                text-decoration: none;
                border-radius: 5px;
                font-weight: bold;
              }
              .footer {
                text-align: center;
                margin-top: 20px;
                font-size: 12px;
                color: #aaa;
              }
              .footer a {
                color: #007acc;
                text-decoration: none;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>üöÄ New Harbor Release!</h1>
              </div>
              <div class="content">
                <h2>New Release Detected</h2>
                <p>
                  A new version of Harbor has been released. Here are the details:
                </p>
                <p>
                  <strong>Version:</strong> {{ TAG_NAME }}<br>
                  <strong>Release Notes:</strong><br>
                  {{ RELEASE_NOTES }}
                </p>
                <a href="https://github.com/goharbor/harbor/releases/tag/{{ TAG_NAME }}" class="button">
                  View Release
                </a>
              </div>
              <div class="footer">
                <p>
                  This email was generated by GitHub Actions. 
                  <a href="https://github.com/goharbor/harbor">Check out the repository</a>.
                </p>
              </div>
            </div>
          </body>
          </html>
          """
          
          template = Template(email_template)
          html_content = template.render(TAG_NAME=new_tag, RELEASE_NOTES=release_notes)
          
          # ÈÇÆ‰ª∂‰ø°ÊÅØ
          sender = os.getenv('EMAIL_USERNAME')
          password = os.getenv('EMAIL_PASSWORD')
          recipient = "llswdhh@163.com"
          subject = f"üöÄ New Harbor Release: {new_tag}"
          
          msg = MIMEMultipart('alternative')
          msg['From'] = sender
          msg['To'] = recipient
          msg['Subject'] = subject
          msg.attach(MIMEText(html_content, 'html'))
          
          # ÂèëÈÄÅÈÇÆ‰ª∂
          with smtplib.SMTP_SSL('smtp.163.com', 465) as server:
              server.login(sender, password)
              server.sendmail(sender, recipient, msg.as_string())
          print(f"Email sent successfully for release {new_tag}.")
          EOF







# name: Check Harbor Releases

# on:
#   schedule:
#     - cron: "0 * * * *"  # ÊØèÂ∞èÊó∂ËøêË°å‰∏ÄÊ¨°
#   workflow_dispatch:  # ÊâãÂä®Ëß¶ÂèëÊîØÊåÅ

# jobs:
#   check-harbor-releases:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.x'

#       - name: Install dependencies
#         run: pip install requests

#       - name: Check for new Harbor releases
#         id: check_release
#         run: |
#           python <<EOF
#           import requests
#           import os

#           # Ëé∑ÂèñÊúÄËøëÂèëÂ∏ÉÁöÑÊ≠£ÂºèÁâàÊú¨
#           url = "https://api.github.com/repos/goharbor/harbor/releases"
#           response = requests.get(url)
#           response.raise_for_status()
#           releases = response.json()

#           # ËØªÂèñ‰∏äÊ¨°Ê£ÄÊü•ÁöÑÁâàÊú¨ (GitHub Actions ÁéØÂ¢ÉÂèòÈáèÂ≠òÂÇ®)
#           last_checked_version = os.environ.get("LAST_CHECKED_VERSION", "")
#           latest_release = next((r for r in releases if not r['prerelease'] and not r['draft']), None)

#           if latest_release and latest_release["tag_name"] != last_checked_version:
#               print(f"New release found: {latest_release['tag_name']}")
              
#               # ËØªÂèñ .github/email.html Ê®°Êùø
#               email_template_path = os.path.join(os.getenv("GITHUB_WORKSPACE"), ".github", "email.html")
#               with open(email_template_path, "r") as f:
#                   email_template = f.read()

#               # ÊõøÊç¢Ê®°Êùø‰∏≠ÁöÑÂç†‰ΩçÁ¨¶
#               email_body = email_template.replace("{{TAG_NAME}}", latest_release["tag_name"])
#               email_body = email_body.replace("{{RELEASE_NOTES}}", latest_release["body"])

#               print(f"::set-output name=email_body::{email_body}")
#               print(f"::set-output name=new_release::{latest_release['tag_name']}")
#           else:
#               print("No new release found.")
#               print(f"::set-output name=new_release::")
#               print(f"::set-output name=email_body::")
#           EOF

#       - name: Send email if new release
#         if: steps.check_release.outputs.new_release
#         uses: dawidd6/action-send-mail@v3
#         with:
#           server_address: smtp.163.com
#           server_port: 465
#           username: ${{ secrets.EMAIL_USERNAME }}
#           password: ${{ secrets.EMAIL_PASSWORD }}
#           subject: "üöÄ New Harbor Release: ${{ steps.check_release.outputs.new_release }}"
#           to: llswdhh@163.com
#           from: ${{ secrets.EMAIL_USERNAME }}
#           content_type: "text/html"
#           body: ${{ steps.check_release.outputs.email_body }}

#       - name: Save latest checked release
#         if: steps.check_release.outputs.new_release
#         run: echo "LAST_CHECKED_VERSION=${{ steps.check_release.outputs.new_release }}" >> $GITHUB_ENV
